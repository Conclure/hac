buildscript {
    ext {
        /* Dirs */
        //noinspection GroovyAssignabilityCheck
        fileTreeSpigot = fileTree(buildDir.parentFile.path + '/buildtools/').matching {
            include 'spigot*.jar'
        }

        if (fileTreeSpigot.size() != 0) {
            //noinspection GroovyAssignabilityCheck
            latestSpigot = files(fileTreeSpigot.iterator().next())
        } else {
            //noinspection GroovyAssignabilityCheck
            latestSpigot = 'org.spigotmc:spigot-api:1.16.4-R0.1-SNAPSHOT'
        }

        pluginVersion = '0.1.3'
    }

    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "io.freefair.gradle:lombok-plugin:5.3.0"
        classpath "net.ltgt.gradle:gradle-errorprone-plugin:1.3.0"
    }
}

plugins {
    id 'base'
    id 'org.sonarqube' version '3.0'
}

sonarqube {
    properties {
        property "sonar.projectKey", "Heirteir-commits_HAC"
        property "sonar.organization", "heirteir-commits"
        property "sonar.host.url", "https://sonarcloud.io"
        property 'sonar.coverage.jacoco.xmlReportPaths',
                project(':hac-util').buildDir.path + '/coverage.xml,' +
                        project(':hac-api').buildDir.path + "/converage.xml"

    }
}

task updateSpigot {
    doLast {
        def buildToolsDirectory = file(buildDir.parentFile.path + '/buildtools/')
        buildToolsDirectory.mkdirs()
        new URL('https://hub.spigotmc.org/jenkins/job/BuildTools/lastBuild/artifact/target/BuildTools.jar')
                .withInputStream { i ->
                    file(buildToolsDirectory.path + '/BuildTools.jar').withOutputStream {
                        it << i
                    }
                }

        exec {
            workingDir buildToolsDirectory.path
            commandLine 'java', '-jar', 'BuildTools.jar', '--compile-if-changed', '--rev', 'latest'
        }
    }
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'io.freefair.lombok'
    apply plugin: 'net.ltgt.errorprone'
    apply plugin: 'jacoco'

    compileJava {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    test {
        useJUnitPlatform()
        finalizedBy jacocoTestReport
    }

    jacocoTestReport {
        reports {
            xml.enabled = true
            csv.enabled = false
            html.enabled = false
            xml.destination = file("$buildDir/coverage.xml")
        }
        dependsOn test
    }

    repositories {
        mavenCentral()
        maven {
            url "https://hub.spigotmc.org/nexus/content/repositories/snapshots"
        }
    }
}
