/*
 * MIT License
 *
 * Copyright (c) 2021 Justin Heflin
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */

plugins {
    id 'base'
    id 'idea'
    id 'net.ltgt.errorprone' version '1.3.0' apply false
}

ext {
    SHADOW_JAR_OUTPUT_DIR = file(buildDir.parentFile.path + "/jars")
    SHADOW_JAR_OUTPUT_DIR.mkdirs()
    /* Group name*/
    TASK_GROUP_NAME = 'hac package'

    /* ine latest spigot API for subprojects */
    LATEST_SPIGOT = 'org.spigotmc:spigot-api:1.16.4-R0.1-SNAPSHOT'

    /* Spigot jar version */
    /* Place a compiled Spigot Jar in the put_spigot_jars_here/ folder with the specified names seen here to build implementation */
    /* You don't need all jar versions you just need the jar for the version you want to compile. */
    /* Jar names must be their nms version names eg: 1.8.8 = 1_8_R3, 1.9.4 = 1_9_R2 */

    /* To define a new version just add a new index to the array and add the module to settings.gradle */
    VERSIONS = [:]

    def tmpVersions = [
//        [find: 'eight', replace: '1_8_R3'],
//        [find: 'nine', replace: '1_9_R2'],
//        [find: 'ten', replace: '1_10_R1'],
//        [find: 'eleven', replace: '1_11_R1'],
//        [find: 'twelve', replace: '1_12_R1'],
//        [find: 'thirteen', replace: '1_13_R2'],
//        [find: 'fourteen', replace: '1_14_R1'],
//        [find: 'fifteen', replace: '1_15_R1'],
[find: 'sixteen', replace: '1_16_R3']
    ]

    tmpVersions.each {
        v ->
            VERSIONS[v.replace] = [
                replacer     : v,
                spigotJar    : file(buildDir.parentFile.path + '/put_spigot_jars_here/' + v.replace + '.jar'),
                projectAppend: ':' + v.replace,
                include      : false
            ]
    }

    def buildAll = task('Build All') {
        group TASK_GROUP_NAME
    }

    VERSIONS.each {
        k, v ->
            task(k.toString()) {
                group TASK_GROUP_NAME
                doFirst {
                    v.include = true
                }
            }

            buildAll.dependsOn k.toString()
    }
}

group 'com.heretere'

/* This is used to change the version for all subprojects */
version '0.0.1'

/* Project wide dependencies */
allprojects {
    repositories {
        mavenCentral()
        maven { url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots' }
        maven { url 'https://papermc.io/repo/repository/maven-public/' }
        maven { url 'https://repo.codemc.org/repository/maven-public/' }
    }

    /* Apply errorprone to all project sources */
    pluginManager.withPlugin('net.ltgt.errorprone') {
        dependencies {
            errorprone 'com.google.errorprone:error_prone_core:2.4.0'
        }
    }

    /* Project wide dependencies */
    pluginManager.withPlugin('java-library') {
        dependencies {
            compileOnlyApi 'org.jetbrains:annotations-java5:20.1.0'
        }

        compileJava {
            /* Ensure that all versions are compiled with 1.8 support */
            sourceCompatibility = JavaVersion.VERSION_1_9
            targetCompatibility = JavaVersion.VERSION_1_9
        }
    }
}

subprojects {
    /* Project wide plugins */
    apply plugin: 'idea'
    apply plugin: 'checkstyle'
//    apply plugin: 'net.ltgt.errorprone'
    checkstyle {
        configFile = rootProject.file('config/checkstyle/checkstyle.xml')
        configProperties = [
            'checkstyle.cache.file': "${buildDir}/checkstyle.cache",
        ]
        ignoreFailures = true
        showViolations = true
    }
}